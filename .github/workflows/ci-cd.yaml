name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ESP32 Firmware Build and Test
  firmware-test:
    runs-on: [self-hosted, kubernetes, whofi]
    container:
      image: espressif/idf:latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build ESP32 Firmware
      working-directory: csi-firmware
      run: |
        . $IDF_PATH/export.sh
        idf.py clean
        idf.py build
    
    - name: Run Firmware Tests
      working-directory: csi-firmware
      run: |
        . $IDF_PATH/export.sh
        cd test
        ./run_tests.sh

  # Docker Server Build and Test
  server-test:
    runs-on: [self-hosted, kubernetes, whofi]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: csi-server/backend/package-lock.json
    
    - name: Install Backend Dependencies
      working-directory: csi-server/backend
      run: npm ci
    
    - name: Run Backend Tests
      working-directory: csi-server/backend
      run: npm test
    
    - name: Install Frontend Dependencies
      working-directory: csi-server/frontend
      run: npm ci
    
    - name: Run Frontend Tests
      working-directory: csi-server/frontend
      run: npm test -- --watchAll=false

  # Build Docker Images
  docker-build:
    needs: [firmware-test, server-test]
    runs-on: [self-hosted, kubernetes, whofi]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Image
      working-directory: csi-server
      run: |
        docker build -t whofi-backend:${{ github.sha }} -f backend/Dockerfile .
        docker tag whofi-backend:${{ github.sha }} whofi-backend:latest
    
    - name: Build Frontend Image
      working-directory: csi-server
      run: |
        docker build -t whofi-frontend:${{ github.sha }} -f frontend/Dockerfile .
        docker tag whofi-frontend:${{ github.sha }} whofi-frontend:latest
    
    # Optional: Push to registry
    # - name: Push to Registry
    #   run: |
    #     docker push your-registry/whofi-backend:${{ github.sha }}
    #     docker push your-registry/whofi-frontend:${{ github.sha }}

  # Deploy to Kubernetes (Optional)
  deploy:
    needs: docker-build
    runs-on: [self-hosted, kubernetes, whofi]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        kubectl set image deployment/whofi-backend \
          backend=whofi-backend:${{ github.sha }} \
          -n whofi-production || echo "Deployment not found"
        
        kubectl set image deployment/whofi-frontend \
          frontend=whofi-frontend:${{ github.sha }} \
          -n whofi-production || echo "Deployment not found"
    
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/whofi-backend -n whofi-production || true
        kubectl rollout status deployment/whofi-frontend -n whofi-production || true

  # Security Scanning
  security-scan:
    runs-on: [self-hosted, kubernetes, whofi]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      working-directory: csi-server/backend
      run: npm audit --audit-level=moderate || true
    
    - name: Run frontend security scan
      working-directory: csi-server/frontend
      run: npm audit --audit-level=moderate || true